/**
 * This module makes creation of final build config for serving a react app
 * accessible to middleware.
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _webpackMerge = require('webpack-merge');

var _webpackMerge2 = _interopRequireDefault(_webpackMerge);

/**
 * Creates a build configuration object which will be used to create a Webpack
 * config for serving a React app. Ensures React is available to do so.
 */

exports['default'] = function (config) {
  var _config$staticPath = config.staticPath;
  var staticPath = _config$staticPath === undefined ? null : _config$staticPath;

  var otherConfig = _objectWithoutProperties(config, ['staticPath']);

  return _webpackMerge2['default'](otherConfig, {
    loaders: {
      babel: {
        // Configure hot reloading and error catching via react-transform
        query: {
          plugins: [require.resolve('babel-plugin-react-display-name'), require.resolve('babel-plugin-react-transform')],
          extra: {
            'react-transform': {
              transforms: [{
                transform: require.resolve('react-transform-hmr'),
                imports: ['react'],
                locals: ['module']
              }, {
                transform: require.resolve('react-transform-catch-errors'),
                imports: ['react', require.resolve('redbox-noreact')]
              }]
            }
          }
        }
      }
    },
    server: {
      staticPath: staticPath
    }
  });
};

module.exports = exports['default'];