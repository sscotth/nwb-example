'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _packageJson = require('../package.json');

var _packageJson2 = _interopRequireDefault(_packageJson);

var _colours = require('./colours');

exports['default'] = function (argv, cb) {
  var args = _minimist2['default'](argv, {
    alias: {
      c: 'config',
      h: 'help',
      v: 'version'
    },
    boolean: ['help', 'version']
  });

  var command = args._[0];

  if (args.version || /^v(ersion)?$/.test(command)) {
    console.log('v' + _packageJson2['default'].version);
    process.exit(0);
  }

  if (args.help || !command || /^h(elp)?$/.test(command)) {
    console.log('Usage: ' + _colours.green('nwb') + ' ' + _colours.yellow('<command>') + ' ' + _colours.cyan('[options]') + '\n\nOptions:\n  ' + _colours.cyan('-c, --config') + '   config file to use ' + _colours.cyan('[default: nwb.config.js]') + '\n  ' + _colours.cyan('-h, --help') + '     display this help message\n  ' + _colours.cyan('-v, --version') + '  print nwb\'s version\n\nProject creation commands:\n  ' + _colours.green('nwb new') + ' ' + _colours.yellow('<project_type> <name>') + ' ' + _colours.cyan('[options]') + '\n    Create a project in a new directory.\n\n    Arguments:\n      ' + _colours.yellow('project_type') + '  project type - see the list below\n      ' + _colours.yellow('name') + '          project name\n\n  ' + _colours.green('nwb init') + ' ' + _colours.yellow('<project_type>') + ' ' + _colours.cyan('[name] [options]') + '\n    Initialise a project in the current directory.\n\n    Arguments:\n      ' + _colours.yellow('project_type') + '  project type - see the list below\n      ' + _colours.cyan('name') + '          project name ' + _colours.cyan('[default: working directory name]') + '\n\n  Options:\n    ' + _colours.cyan('-f, --force') + '   force project creation, don\'t ask questions\n    ' + _colours.cyan('-g, --global') + '  global variable name to export in the UMD build\n    ' + _colours.cyan('--no-jsnext') + '   disable npm ES6 modules build\n    ' + _colours.cyan('--no-umd') + '      disable npm UMD module build\n    ' + _colours.cyan('--react') + '       version of React to install for React apps & components\n\n  Project types:\n    ' + _colours.yellow('react-app') + '        a React app\n    ' + _colours.yellow('react-component') + '  a React component module with a demo app\n    ' + _colours.yellow('web-app') + '          a plain JavaScript app\n    ' + _colours.yellow('web-module') + '       a plain JavaScript module\n\nGeneric development commands:\n  Arguments for these commands depend on the type of project they\'re being run\n  in. See the applicable project type-specific commands below.\n\n  ' + _colours.green('nwb build') + '\n    Clean and build the project.\n\n  ' + _colours.green('nwb clean') + '\n    Delete built resources.\n\n  ' + _colours.green('nwb serve') + '\n    Serve an app, or a component\'s demo app, with hot reloading.\n\n    Options:\n      ' + _colours.cyan('--auto-install') + '  auto install missing npm dependencies\n      ' + _colours.cyan('--fallback') + '      serve the index page from any path\n      ' + _colours.cyan('--host') + '          hostname to bind the dev server to ' + _colours.cyan('[default: localhost]') + '\n      ' + _colours.cyan('--info') + '          show webpack module info\n      ' + _colours.cyan('--port') + '          port to run the dev server on ' + _colours.cyan('[default: 3000]') + '\n      ' + _colours.cyan('--reload') + '        auto reload the page if hot reloading fails\n\n  ' + _colours.green('nwb test') + '\n    Run unit tests.\n\n    Options:\n      ' + _colours.cyan('--coverage') + '  create a code coverage report\n      ' + _colours.cyan('--server') + '    keep running tests on every change\n\nProject type-specific commands:\n  ' + _colours.green('nwb build-demo') + '\n    Build a demo app from demo/src/index.js to demo/dist/.\n\n  ' + _colours.green('nwb build-module') + '\n    Create an ES5 build for an npm module (ES6 modules build requires config).\n\n  ' + _colours.green('nwb build-react-app') + ' ' + _colours.cyan('[entry] [dist_dir]') + '\n    Build a React app from ' + _colours.cyan('entry') + ' to ' + _colours.cyan('dist_dir') + '.\n\n  ' + _colours.green('nwb build-umd') + ' ' + _colours.cyan('[entry]') + '\n    Create a UMD build for an npm module from ' + _colours.cyan('entry') + ' (requires config).\n\n  ' + _colours.green('nwb build-web-app') + ' ' + _colours.cyan('[entry] [dist_dir]') + '\n    Build a web app from ' + _colours.cyan('entry') + ' to ' + _colours.cyan('dist_dir') + '.\n\n  ' + _colours.green('nwb clean-app') + ' ' + _colours.cyan('[dist_dir]') + '\n    Delete ' + _colours.cyan('dist_dir') + '.\n\n  ' + _colours.green('nwb clean-demo') + '\n    Delete demo/dist/.\n\n  ' + _colours.green('nwb clean-module') + '\n    Delete coverage/, es6/ and lib/.\n\n  ' + _colours.green('nwb clean-umd') + '\n    Delete umd/.\n\n  ' + _colours.green('nwb serve-react-app') + ' ' + _colours.cyan('[entry]') + '\n    Serve a React app from ' + _colours.cyan('entry') + '\n\n  ' + _colours.green('nwb serve-react-demo') + '\n    Serve a React demo app from demo/src/index.js.\n\n  ' + _colours.green('nwb serve-web-app') + ' ' + _colours.cyan('[entry]') + '\n    Serve a web app from ' + _colours.cyan('entry') + '.\n\n  Arguments:\n    ' + _colours.cyan('entry') + '     entry point ' + _colours.cyan('[default: src/index.js]') + '\n    ' + _colours.cyan('dist_dir') + '  build output directory ' + _colours.cyan('[default: dist/]') + '\n');
    process.exit(args.help || command ? 0 : 1);
  }

  var unknownCommand = function unknownCommand() {
    console.error(_colours.red('nwb: unknown command:') + ' ' + _colours.yellow(command));
    process.exit(1);
  };

  // Validate the command is in foo-bar-baz format before trying to resolve a
  // module path with it.
  if (!/^[a-z]+(?:-[a-z]+)*$/.test(command)) {
    unknownCommand();
  }

  var commandModulePath = undefined;
  try {
    commandModulePath = require.resolve('./commands/' + command);
  } catch (e) {
    unknownCommand();
  }

  var commandModule = require(commandModulePath);
  if (commandModule['default']) {
    commandModule = commandModule['default'];
  }
  commandModule(args, cb);
};

module.exports = exports['default'];