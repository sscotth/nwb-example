#!/usr/bin/env node


// TODO These imports are in the "wrong" order per project convention, but
//      ESLint's spaced-comment rule is flagging a shebang followed by a
//      destructured import as an error due to babel/babel-eslint#163
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _packageJson = require('../../package.json');

var _packageJson2 = _interopRequireDefault(_packageJson);

var _colours = require('../colours');

var _errors = require('../errors');

var COMMAND_MODULES = {
  build: 'build-react',
  run: 'serve-react'
};

function handleError(error) {
  if (error instanceof _errors.UserError) {
    console.error(_colours.red(error.message));
  } else {
    console.error(_colours.red('react(nwb): error running command'));
    if (error.stack) {
      console.error(error.stack);
    }
  }
  process.exit(1);
}

var args = _minimist2['default'](process.argv.slice(2), {
  alias: {
    c: 'config',
    h: 'help',
    v: 'version'
  },
  boolean: ['help', 'version']
});

var command = args._[0];

if (args.version || /^v(ersion)?$/.test(command)) {
  console.log('v' + _packageJson2['default'].version);
  process.exit(0);
}

if (args.help || !command || /^h(elp)?$/.test(command)) {
  console.log('Usage: ' + _colours.green('react') + ' ' + _colours.yellow('(run|build)') + ' ' + _colours.cyan('[options]') + '\n\nOptions:\n  ' + _colours.cyan('-c, --config') + '   config file to use ' + _colours.cyan('[default: nwb.config.js]') + '\n  ' + _colours.cyan('-h, --help') + '     display this help message\n  ' + _colours.cyan('-v, --version') + '  print nwb\'s version\n\nCommands:\n  ' + _colours.green('react run') + ' ' + _colours.yellow('<entry>') + ' ' + _colours.cyan('[options]') + '\n    Serve a React app for development.\n\n    Arguments:\n      ' + _colours.yellow('entry') + '           entry point for the app\n\n    Options:\n      ' + _colours.cyan('--auto-install') + '  auto install missing npm dependencies\n      ' + _colours.cyan('--fallback') + '      serve the index page from any path\n      ' + _colours.cyan('--host') + '          hostname to bind the dev server to ' + _colours.cyan('[default: localhost]') + '\n      ' + _colours.cyan('--info') + '          show webpack module info\n      ' + _colours.cyan('--mount-id') + '      id for the <div> the app will render into ' + _colours.cyan('[default: app]') + '\n      ' + _colours.cyan('--port') + '          port to run the dev server on ' + _colours.cyan('[default: 3000]') + '\n      ' + _colours.cyan('--reload') + '        auto reload the page if hot reloading fails\n      ' + _colours.cyan('--title') + '         contents for <title> ' + _colours.cyan('[default: React App]') + '\n\n  ' + _colours.green('react build') + ' ' + _colours.yellow('<entry>') + ' ' + _colours.cyan('[dist_dir] [options]') + '\n    Create a static build for a React app.\n\n    Arguments:\n      ' + _colours.yellow('entry') + '       entry point for the app\n      ' + _colours.cyan('dist_dir') + '    build output directory ' + _colours.cyan('[default: dist/]') + '\n\n    Options:\n      ' + _colours.cyan('--mount-id') + '  id for the <div> the app will render into ' + _colours.cyan('[default: app]') + '\n      ' + _colours.cyan('--title') + '     contents for <title> ' + _colours.cyan('[default: React App]') + '\n      ' + _colours.cyan('--vendor') + '    create a separate vendor bundle\n');
  process.exit(args.help || command ? 0 : 1);
}

if (!COMMAND_MODULES.hasOwnProperty(command)) {
  console.error(_colours.red('react(nwb): unknown command:') + ' ' + _colours.yellow(command));
  process.exit(1);
}

var commandModule = require('../commands/' + COMMAND_MODULES[command]);
if (commandModule['default']) {
  commandModule = commandModule['default'];
}

try {
  commandModule(args, function (err) {
    if (err) handleError(err);
  });
} catch (e) {
  handleError(e);
}