'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _getUserConfig2 = require('../getUserConfig');

var _getUserConfig3 = _interopRequireDefault(_getUserConfig2);

var _errors = require('../errors');

var _utils = require('../utils');

var _webpackBuild = require('../webpackBuild');

var _webpackBuild2 = _interopRequireDefault(_webpackBuild);

/**
 * Create a web module's UMD builds.
 */

exports['default'] = function (args, cb) {
  var pkg = require(_path2['default'].resolve('package.json'));

  var _getUserConfig = _getUserConfig3['default'](args);

  var build = _getUserConfig.build;

  if (!build.umd) {
    return cb(new _errors.UserError("nwb: the UMD build for this module hasn't been enabled in nwb.config.js"));
  }

  var entry = args._[1] || 'src/index.js';
  var buildConfig = {
    entry: _path2['default'].resolve(entry),
    output: {
      filename: pkg.name + '.js',
      library: build.global,
      libraryTarget: 'umd',
      path: _path2['default'].resolve('umd')
    },
    externals: _utils.createWebpackExternals(build.externals),
    plugins: {
      banner: _utils.createBanner(pkg)
    }
  };

  require('./clean-umd')(args);

  console.log('nwb: build-umd');
  process.env.NODE_ENV = 'development';
  _webpackBuild2['default'](args, buildConfig, function (err) {
    if (err) return cb(err);
    process.env.NODE_ENV = 'production';
    buildConfig.devtool = 'source-map';
    buildConfig.output.filename = pkg.name + '.min.js';
    _webpackBuild2['default'](args, buildConfig, cb);
  });
};

module.exports = exports['default'];