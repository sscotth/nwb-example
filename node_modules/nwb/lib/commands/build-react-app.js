'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appConfig = require('../appConfig');

var _utils = require('../utils');

var _webpackBuild = require('../webpackBuild');

var _webpackBuild2 = _interopRequireDefault(_webpackBuild);

// Use a config function, as this won't be called until after NODE_ENV has been
// set by webpackBuild() and we don't want these optimisations in development
// builds.
var buildConfig = function buildConfig(args) {
  var entry = args._[1] || 'src/index.js';
  var dist = args._[2] || 'dist';

  var config = {
    devtool: 'source-map',
    entry: {
      app: _path2['default'].resolve(entry)
    },
    output: {
      filename: '[name].js',
      path: _path2['default'].resolve(dist),
      publicPath: '/'
    },
    plugins: {
      html: _appConfig.getDefaultHTMLConfig(),
      vendorChunkName: 'vendor'
    }
  };

  if (process.env.NODE_ENV === 'production') {
    config.loaders = {
      babel: {
        query: {
          optional: ['optimisation.react.inlineElements', 'optimisation.react.constantElements']
        }
      }
    };
  }

  return config;
};

/**
 * Build a React app.
 */

exports['default'] = function (args, cb) {
  var dist = args._[2] || 'dist';

  require('./clean-app')({ _: ['clean-app', dist] });

  console.log('nwb: build-react-app');
  _utils.copyPublicDir('public', dist);
  _webpackBuild2['default'](args, buildConfig, cb);
};

module.exports = exports['default'];